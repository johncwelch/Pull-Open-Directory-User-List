--this was a script I used in conjunction with SOX audit. --It creates a TSV file that shows current OD user accounts and their disabled status.global theNameListproperty theUserName : ""property theDisabledFlag : 0property theDisabledStatus : ""property thePWpolicy : ""set theNameList to {}--sets the date, since the idea of this is to create a report that can be opened in Excel.set theDate to (date string of (get current date))--creates the headers for the tsv file this creates.set the end of theNameList to theDate & "" & "First Name	Last Name	Current User?"--grab the users realname out of OD users, but not any with "VPN" in their nameset theResult to do shell script "/usr/bin/dscl /LDAPv3/<DNS Name of your OD Server here> -list /Users RealName|grep -v VPN"set theResultList to every paragraph of theResult --a list with one entry per line--iterate through the listrepeat with x in theResultList		--this is some cheesy text processing, but it works	--should be fairly obvious what each line in this bit does	set theResultLine to every word of x	set theUserName to the first item of theResultLine	set theFirstName to the second item of theResultLine	set theLastName to the last item of theResultLine		--so  you need pwpolicy to find out if a user is disabled	--also note that -getpolicy is deprecated, and you should use -getaccountpolicies in 10.11 and later	--however, I don't have an OD master around to test that switch on, so I've no idea how it returns values	--this script assumes -getpolicy. You've been warned.		--a try without a result just ensures that if there's an error on any given user, it doesn't blow up the script execution	try		set thePWpolicy to do shell script "/usr/bin/pwpolicy -u " & theUserName & " -n /<DNS Name of your OD Server here> -getpolicy"	end try		--if you do enough AppleScript, you're going to play with text item delimiters (TIDs)	--but, you can do some neat stuff with them, so it's not a waste, and they're very fast	set oldDelims to AppleScript's text item delimiters	set AppleScript's text item delimiters to " "		--so now, a text item is anything separated by spaces	set thePWPolicyItems to every text item of thePWpolicy		--it's rude to not reset back to default delims. you don't want to be rude, do you?	set AppleScript's text item delimiters to oldDelims	repeat with y in thePWPolicyItems				--this loop checks to see if the "isdisabled" flag is set to 0 (not disabled) or 1 (disabled)		--or some other value which means something is very, very wrong.		if y contains "isDisabled" then			set theDisabledFlag to (the last character of y as integer)			if theDisabledFlag = 0 then				set theDisabledStatus to "Current User"			else if theDisabledFlag = 1 then				set theDisabledStatus to "Disabled User"			else				set theDisabledStatus to "Unknown"			end if			exit repeat		end if	end repeat		--lets build a record for our TSV and shove it on the end of the list we'll use for this	set the end of theNameList to the theFirstName & "	" & theLastName & "	" & theDisabledStatus & ""end repeat--and now the list is a text block, with each list entry converted to a line.set theNameList to theNameList as text--the user picks where the file should go. Choose file name doesn't require an existing file, choose file does.--this returns an aliasset theFilePath to choose file name with prompt "Pick where you want this to go" default name "Current Open Directory User List.txt"--this sets the alias available for writing, and returns a file handleset thefileHandle to open for access theFilePath with write permission--shove data into the file handlewrite theNameList to thefileHandle--always close access, DON'T BE THAT GUY! NO ONE LIKES THAT GUY!close access thefileHandle